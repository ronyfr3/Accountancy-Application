@mixin flex($dir, $align, $content) {
  display: flex;
  flex-direction: $dir;
  align-items: $align;
  justify-content: $content;
}

// https://itnext.io/writing-media-queries-with-sass-mixins-3ea591ea3ea4
// phone-only=P
// tablet-portrait-up=TP
// tablet-landscape-up=TL
// desktop-up=D
// big-desktop-up=BD
@mixin media($size) {
  @if $size == P {
    @media (max-width: 599px) {
      @content;
    }
  } @else if $size == TP {
    @media (min-width: 600px) {
      @content;
    }
  } @else if $size == TL {
    @media (min-width: 900px) {
      @content;
    }
  } @else if $size == D {
    @media (min-width: 1200px) {
      @content;
    }
  } @else if $size == BG {
    @media (min-width: 1800px) {
      @content;
    }
  }
}

// FLUID FONT SIZES

$breakpoints: (
  small: 480px,
  medium: 700px,
  // Previously 640px
  large: 1024px,
);

$p-font-sizes: (
  null: (
    15px,
    1.3,
  ),
  small: 16px,
  medium: (
    17px,
    1.4,
  ),
  900px: 18px,
  large: (
    19px,
    1.45,
  ),
  1440px: 20px,
);

$h1-font-sizes: (
  null: 28px,
  small: 31px,
  medium: 33px,
  large: 36px,
);

@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      @include make-font-size($fs-font-size);
    } @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        @include make-font-size($fs-font-size);
      }
    }
  }
}

// Utility function for mixin font-size
@mixin make-font-size($fs-font-size) {
  // If $fs-font-size is a list, include
  // both font-size and line-height
  @if type-of($fs-font-size) == "list" {
    font-size: nth($fs-font-size, 1);
    @if (length($fs-font-size) > 1) {
      line-height: nth($fs-font-size, 2);
    }
  } @else {
    font-size: $fs-font-size;
  }
}
