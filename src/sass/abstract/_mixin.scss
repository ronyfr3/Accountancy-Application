@mixin flex($dir, $align, $content) {
  display: flex;
  flex-direction: $dir;
  align-items: $align;
  justify-content: $content;
}

@mixin btn {
  border: none;
  outline: none;
  cursor: pointer;
  background-color: #009ccb;
  @include font-size($p-font-sizes);
  padding: 9px 20px 9px 20px;
  border-radius: 4px;
  box-shadow: $shadow1;
  color: white;
}

@mixin media($size) {
  // mobile small
  @if $size == MS {
    @media (max-width: 320px) {
      @content;
    }
    //mobile medium
  } @else if $size == MM {
    @media (max-width: 375px) {
      @content;
    }
    // mobilelarge
  } @else if $size == P {
    @media (max-width: 480px) {
      @content;
    }
    // mobile extra large
  } @else if $size == PL {
    @media (max-width: 576px) {
      @content;
    }
    // tablet protrait
  } @else if $size == T {
    @media (min-width: 768px) {
      @content;
    }
  } @else if $size == L {
    @media (min-width: 1024px) {
      @content;
    }
    // laptop large
  } @else if $size == LL {
    @media (min-width: 1440px) {
      @content;
    }
  } @else if $size ==D {
    @media (min-width: 2560px) {
      @content;
    }
  }
}

// FLUID FONT SIZES

$breakpoints: (
  320: 320px,
  375: 375px,
  425: 425px,
  768: 768px,
  1024: 1024px,
  1440: 1440px,
  2560: 2560px,
);

$p-font-sizes: (
  320: (
    15px,
    1.5,
  ),
  375: (
    15px,
    1.5,
  ),
  425: (
    15px,
    1.5,
  ),
  768: (
    16px,
    1.6,
  ),
  1024: (
    16px,
    1.5,
  ),
  1440: (
    18px,
    1.5,
  ),
  2560: (
    30px,
    1.6,
  ),
);

$h1-font-sizes: (
  320: (
    18px,
    1.3,
  ),
  375: (
    20px,
    1.3,
  ),
  425: (
    22px,
    1.3,
  ),
  768: (
    24px,
    1.5,
  ),
  1024: (
    28px,
    1.5,
  ),
  1440: (
    34px,
    1.5,
  ),
  2560: (
    56px,
    1.5,
  ),
);
$h2-font-sizes: (
  320: (
    17px,
  ),
  375: (
    17px,
  ),
  425: (
    20px,
  ),
  768: (
    22px,
  ),
  1024: (
    26px,
  ),
  1440: (
    30px,
  ),
  2560: (
    35px,
  ),
);

@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      @include make-font-size($fs-font-size);
    } @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        @include make-font-size($fs-font-size);
      }
    }
  }
}

// Utility function for mixin font-size
@mixin make-font-size($fs-font-size) {
  // If $fs-font-size is a list, include
  // both font-size and line-height
  @if type-of($fs-font-size) == "list" {
    font-size: nth($fs-font-size, 1);
    @if (length($fs-font-size) > 1) {
      line-height: nth($fs-font-size, 2);
    }
  } @else {
    font-size: $fs-font-size;
  }
}
